package com.ict03.class01;

public class Ex01 {
	//객체를 만들기 위한 모든 정보를 가지고 있는 것.
	//파일 형태로 되어있으면 클래스를 객체로 만들어야 사용 가능
	
	//가지고 있는것 : 데이터(상태값, 속성, 정보), 기능(동작), 생성자
	//데이터(상태값, 속성) = 변수와 상수 => 멤버필드
	//기능(동작, 작동) = 메소드   => 멤버 메소드
	//생성자 = 클래스를 객체로 만들 떄 호출
	//생성자는 클래스 이름과 같음. 클래스 이름이 저장 이름
	//새엉자 클래스 이름()
	//생성자의 목적은 멤버필드의 쵝화
	
	
	//클래스의 구조 : 헤더, 멤버필드, 멤버 메소드, 생성자
	//1. 헤더 : [접근제한자] [클래스 종류] class 클래스 이름
	//	-접근 제한자 : 외부에서 접그낳ㄹ 수 있는 권한을 말함
	//			클래스, 멤버 필드, 멤버메소드, 생성자 모두 맨 앞에 표시할 수 있다.
	//1) public 	: All
	//2) protected	: 같은 패키지 + 상속관계
	//3) 생략 		:같은 패키지
	//4) private	:접근 못함 외부에서는.    내부에선 가능
	
	//클래스 종류 : 일반적인 클래스들은 이 부분을 생략
	//				특정 클래스는 해당 예약어 사용(final, abstract)
	
	//클래스 이름 : 클래스 이름 = 저장 이름 = 생성자
	//			첫 글자 대문자 나머지 소문자
	//			두 단어 이상일 때 단어들의 첫 글자는 대문자
	//2 멤버 필드(변수와 상수) : 상태값, 데이터, 속성, 특징
	// -변수 : 언제든지 변할 수 있는 데이터를 저장하는 공간
	//			첫 글자 소문자, 두 단어 이상일 때 단어들의 첫글자는 대문자
	//		특수문자 사용 x 숫자는 처음에는 못씀
	//-상수 : 한 번 지정하면 변경 x인 데이터를 저장하는 공간.
	//		모든 글자가 대문자, 단어와 단어 사이에 _를 사용가능
	//3. 멤버메소드 : 동작, 기능, 작동 ~~
	//-메소드 구성 : [접근 제한자][메소드종류] 반환형 메소드 이름([인자=매개변수]){실행내용;}
	//	1) 접근 제한자 : 클래스 접근 제한자와 같음
	//	2) 메소드 종류 : instance 메소드와 static 메소드로 나눠짐
	//					instance 메소드가 일반메소드로 생략
	//					static은 반드시 써줘야함
	/*
		3) 반환형 : 메소드는 자기를 호출한 곳으로 되도랑감. 
		4)인자 = 받는거
		5) getter() / setter() : 접근자 편집(?)자
	
	
	4. 생성자 : 클래스를 객체로 만들 때 한번 호출 되는 것.
	 	-목적 : 멤버 필드(변수와 상수)의 초기값을 지정하는 것이 목적
	 	-형식 : 클래스 이름과 생성자는 같다.
	 			반환형이 없는 메소드와 같다.
	 	-클래스를 객체로 만드는 방법
	 	Scanner sc = new Scanner(System.in)
		클래스  참조변수 = 객체 생성(new)   생성자;
		
		참조변수를 이용해서 객체가 가지고 있는 멤버 피드나 멤버 메소드를 사용할 수 있다.
		객체를 만들기 위해서는 생성자를 호출해야 하지만 반드시 해당 클래스가 가지고 있는 생성자만 호출 가능
		-모든 클래스는 반드시 생성자를 가지고 있다.(인터페이스 제외)
		생성자가 보이지 않는 클래스는 기본 생성자로 객체를 생성하게 된다.
		기본 생성자란 인자가 업슨 ㄴ생성자
		-만들어진 객체 안에 존재하는 멤버필드나 멤버 메소드를 사용하는 방법
		참조변수.멤버필드, 참조변수.멤버메소드 
		위에서 sc는 참조변수다.
		-생성자도 오버로딩 가능
		하나의 클래스 안에 여러 개의 생성자가 존재 가능
		
		멤버메소드와 멤버 필드는 크게 두 가지 종류가 있다.
		instance메소드, instance필드, static메소드, static 필드
		**클래스에는 일반적으로  static을 사용할 수 없다.(내부 클래스는 예외)
		*-instance : 일반적인 메소드나 필드를 말한다. 객체가 생성될 때 같이 생성되는 메소드나 필드를 말함
		*-static : static이 붙어 있는 메소드나 필드를 말한다.
		*			**객체 생성과 상관없이 미리 만들어진 메소드나 필드를 말함.
		*
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	*/
}